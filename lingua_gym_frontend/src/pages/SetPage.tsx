import { useEffect, useState } from 'react';
import {
  Accordion, AccordionActions, AccordionDetails, AccordionSummary,
  Box, Button, Container, Divider, Fab, List, ListItem, ListItemButton, ListItemText, Stack, Typography
} from "@mui/material";
import { useParams } from "react-router-dom";
import VolumeUpIcon from '@mui/icons-material/VolumeUp';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import ImageIcon from '@mui/icons-material/Image';
import AddIcon from '@mui/icons-material/Add';
import DeleteIcon from '@mui/icons-material/Delete';
import TagIcon from '@mui/icons-material/Tag';

interface example {
  example: string | null;
  translation: string | null;
}

interface Card {
  cardId: string;
  original: string;
  transcription?: string | null;
  pronunciation: string;
  translations: string[];
  meanings: string[];
  examples: example[];
  imageUrl?: string;
}

interface SetInfo {
  title: string;
  createdBy: string;
  rating: number;
  language: string;
  coverImageUrl?: string;
  isPublic: boolean;
  tags: string[];
  userAccess: 'owner' | 'editor' | 'viewer';
  cards: Card[];
}

const SetPage = () => {
  const { setName, setId } = useParams();
  const [set, setSet] = useState<SetInfo | null>(null);

  useEffect(() => {
    const fetchedSet: SetInfo = {
        title: '¬°Expr√©sate!',
        createdBy: 'Verbivore9000',
        rating: 4.7,
        language: '–ò—Å–ø–∞–Ω—Å–∫–∏–π',
        coverImageUrl: '/public/set_image_example.png',
        isPublic: true,
        tags: ['spanish', 'grammar', 'vocabulary'],
        userAccess: 'owner',
        cards: [
            {
            cardId: '1',
            original: '¬°Buenos d√≠as!',
            transcription: 'bwe.nos Ààdi.as',
            pronunciation: '',
            translations: ['–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ'],
            meanings: ['–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —É—Ç—Ä–∞', '–í–µ–∂–ª–∏–≤–∞—è —Ñ–æ—Ä–º–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞'],
            examples: [
                {
                example: '¬°Buenos d√≠as, se√±or! ¬øC√≥mo est√° usted?',
                translation: '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —Å—ç—Ä! –ö–∞–∫ –¥–µ–ª–∞?',
                },
            ],
            imageUrl: '/public/card_image_morning.avif',
            },
            {
            cardId: '2',
            original: '¬øQu√© pasa?',
            transcription: 'ke Ààpa.sa',
            pronunciation: '',
            translations: ['–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?', '–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?'],
            meanings: ['–§–æ—Ä–º–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–º', '–î—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'],
            examples: [
                {
                example: '¬°Ey! ¬øQu√© pasa, t√≠o?',
                translation: '–≠–π! –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –¥—Ä—É–∂–∏—â–µ?',
                },
                {
                example: '¬øQu√© pasa aqu√≠? Todo est√° desordenado.',
                translation: '–ß—Ç–æ —Ç—É—Ç —Å–ª—É—á–∏–ª–æ—Å—å? –í—Å—ë –≤–≤–µ—Ä—Ö –¥–Ω–æ–º.',
                },
            ],
            imageUrl: '/public/puzzled_cat.png',
            },
            {
            cardId: '3',
            original: 'Tengo hambre',
            transcription: 'Ààte≈ã.go Ààam.b…æe',
            pronunciation: '',
            translations: ['–Ø –≥–æ–ª–æ–¥–µ–Ω', '–Ø —Ö–æ—á—É –µ—Å—Ç—å'],
            meanings: ['–£–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –≥–æ–ª–æ–¥', '–§–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å'],
            examples: [
                {
                example: 'Despu√©s de la caminata, todos dec√≠an: "Tengo hambre".',
                translation: '–ü–æ—Å–ª–µ –ø—Ä–æ–≥—É–ª–∫–∏ –≤—Å–µ –≥–æ–≤–æ—Ä–∏–ª–∏: "–Ø –≥–æ–ª–æ–¥–µ–Ω".',
                },
            ],
            imageUrl: '',
            },
            {
            cardId: '4',
            original: 'No entiendo',
            transcription: 'no enÀàtjen.do',
            pronunciation: '',
            translations: ['–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é'],
            meanings: ['–ù–µ–ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–∫–∞–∑–∞–Ω–Ω–æ–≥–æ', '–ü—Ä–æ—Å—å–±–∞ –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏'],
            examples: [
                {
                example: '¬øPuedes repetir, por favor? No entiendo.',
                translation: '–ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞? –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é.',
                },
            ],
            imageUrl: '',
            },
            {
            cardId: '5',
            original: '¬°Hasta luego!',
            transcription: 'Ààas.ta Ààlwe.…£o',
            pronunciation: '',
            translations: ['–î–æ —Å–∫–æ—Ä–æ–≥–æ', '–£–≤–∏–¥–∏–º—Å—è –ø–æ–∑–∂–µ'],
            meanings: ['–ü—Ä–æ—â–∞–Ω–∏–µ', '–û–±–µ—â–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞'],
            examples: [
                {
                example: '‚Äî Me voy al trabajo. ‚Äî ¬°Hasta luego!',
                translation: '‚Äî –Ø —É—Ö–æ–∂—É –Ω–∞ —Ä–∞–±–æ—Ç—É. ‚Äî –î–æ —Å–∫–æ—Ä–æ–≥–æ!',
                },
            ],
            imageUrl: '',
            },
        ],
    };
    setSet(fetchedSet);
  }, [setName]);

  const playPronunciation = (text: string) => {
    if (!window.speechSynthesis) {
      alert('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ');
      return;
    }
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'en-US';
    window.speechSynthesis.speak(utterance);
  };

  if (!set) {
    return <Typography>–ó–∞–≥—Ä—É–∑–∫–∞...</Typography>;
  }

  return (
    <Container sx={{
      overflowY: 'auto',
      overflowX: 'hidden',
      height: '90vh',
      width: '80%',
      '&::-webkit-scrollbar': {
        width: '0.2em'
      },
      '&::-webkit-scrollbar-track': {
        border: '1px solid #000'
      },
      '&::-webkit-scrollbar-thumb': {
        backgroundColor: '#0A84FF',
      }
    }}>
      <Box
        mt={4}
        p={3}
        sx={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          bgcolor: '#181818',
        }}
      >
        <Box display="flex" alignItems="center">
          {set.coverImageUrl ? (
            <Box
              component="img"
              src={set.coverImageUrl}
              sx={{ height: 150, width: 150, borderRadius: 2, objectFit: 'cover', mr: 2 }}
              alt={set.title}
            />
          ) : (
            <Box
              sx={{
                height: 150,
                width: 150,
                borderRadius: 2,
                mr: 2,
                backgroundColor: '#222',
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
              }}
            >
              <ImageIcon sx={{ fontSize: 80, color: '#eee' }} />
            </Box>
          )}
          <Box>
            <Typography variant="h3" fontWeight={700} color='#25FFA8'>{set.title}</Typography>
            <List sx={{ display: 'flex', flexDirection: 'row' }}>
              {set.tags.map((tag) => (
                <ListItem key={tag} disablePadding>
                  <ListItemButton sx={{ mr: 1, display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between' }}>
                    <TagIcon />
                    <ListItemText primary={tag} />
                  </ListItemButton>
                </ListItem>
              ))}
            </List>
          </Box>
        </Box>
        <Box>
          <Typography variant="subtitle1" sx={{ color: 'skyblue' }}>–ê–≤—Ç–æ—Ä: {set.createdBy}</Typography>
          <Typography variant="subtitle1" sx={{ color: 'skyblue' }}>–Ø–∑—ã–∫: {set.language}</Typography>
          <Typography variant="subtitle1" sx={{ color: 'skyblue' }}>–†–µ–π—Ç–∏–Ω–≥: {set.rating.toFixed(1)} ‚≠ê</Typography>
          <Typography variant="subtitle1" sx={{ color: 'skyblue' }}>–ö–∞—Ä—Ç–æ—á–µ–∫: {set.cards.length}</Typography>
          <Typography variant="subtitle1" sx={{ color: 'skyblue' }}>
            –î–æ—Å—Ç—É–ø: <span style={{ color: set.isPublic ? 'lightgreen' : 'tomato' }}>{set.isPublic ? 'üëÅÔ∏è –ü—É–±–ª–∏—á–Ω—ã–π' : 'üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π'} ({set.userAccess})</span>
          </Typography>
        </Box>
      </Box>

      {set.userAccess === 'owner' && (
        <Box mt={2} p={2} bgcolor="#111" borderRadius={2}>
            <Stack direction="row" spacing={2} justifyContent="space-between" alignItems="center">
                <Stack direction="row" spacing={1}>
                    <Button variant="outlined" color="primary" onClick={() => alert('–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')}>
                    –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
                    </Button>
                    <Button variant="outlined" color="primary" onClick={() => alert('–¢–µ—Å—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')}>
                    –¢–µ—Å—Ç
                    </Button>
                    <Button variant="outlined" color="primary" onClick={() => alert('–ö–∞—Ä—Ç–æ—á–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')}>
                    –ö–∞—Ä—Ç–æ—á–∫–∏
                    </Button>
                </Stack>

                <Stack direction="row" spacing={2} alignItems="center">
                    <Button
                    variant="outlined"
                    color="info"
                    size="small"
                    onClick={() => alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞')}
                    startIcon={<span>üîê</span>}
                    >
                        –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∞
                    </Button>
                    <Fab color="primary" aria-label="add" size="medium" onClick={() => alert('–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É')}>
                        <AddIcon />
                    </Fab>
                    <Fab color="error" aria-label="delete" size="medium" onClick={() => alert('–£–¥–∞–ª–∏—Ç—å —Å–µ—Ç')}>
                        <DeleteIcon />
                    </Fab>
                </Stack>
            </Stack>
        </Box>
      )}

      <Divider sx={{ my: 2 }} />

      <List>
        {set.cards.map((card) => (
          <ListItem key={card.cardId} sx={{ boxShadow: '0px 4px 8px rgba(0, 0, 0, 1)' }}>
            <Accordion sx={{
              width: '100%',
              bgcolor: '#111',
              color: 'white',
              backdropFilter: 'blur(6px)',
              borderRadius: 2,
              transition: '0.3s',
              '&:hover': {
                boxShadow: '0 0 10px rgba(0, 122, 255, 0.4)',
              }
            }}>
              <AccordionSummary expandIcon={<ExpandMoreIcon sx={{ color: 'white' }} />}>
                <Box display="flex" alignItems="center" justifyContent="space-between" width="100%">
                  <Box display='flex' gap={2} alignItems='center'>
                    {card.imageUrl ? (
                      <Box
                        component="img"
                        src={card.imageUrl}
                        sx={{ height: 100, width: 100, borderRadius: 2, objectFit: 'cover', mr: 2 }}
                        alt={card.original}
                      />
                    ) : (
                      <Box
                        sx={{
                          height: 100,
                          width: 100,
                          borderRadius: 2,
                          mr: 2,
                          backgroundColor: '#222',
                          display: 'flex',
                          justifyContent: 'center',
                          alignItems: 'center',
                        }}
                      >
                        <ImageIcon sx={{ fontSize: 50, color: '#eee' }} />
                      </Box>
                    )}
                    <Box>
                      <Typography variant="h6">{card.original}</Typography>
                      <Typography variant="body2" sx={{ color: 'gray' }}>
                        {card.translations[0]}
                      </Typography>
                    </Box>
                  </Box>
                  <Button
                    variant="contained"
                    startIcon={<VolumeUpIcon />}
                    onClick={() => playPronunciation(card.pronunciation)}
                  >
                    –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏
                  </Button>
                </Box>
              </AccordionSummary>

              <AccordionDetails>
                <Stack spacing={1}>
                  {card.transcription && (
                    <Typography><strong>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:</strong> [{card.transcription}]</Typography>
                  )}
                  <Typography><strong>–ü–µ—Ä–µ–≤–æ–¥:</strong> {card.translations.join(', ')}</Typography>
                  <Typography><strong>–ó–Ω–∞—á–µ–Ω–∏—è:</strong> {card.meanings.join('; ')}</Typography>
                  <Typography><strong>–ü—Ä–∏–º–µ—Ä—ã:</strong></Typography>
                  <ul>
                    {card.examples.map((ex, i) => <li key={i}><div>{ex.example}</div><div>{ex.translation}</div></li>)}
                  </ul>
                </Stack>
              </AccordionDetails>

              <AccordionActions>
                <Button color="secondary" sx={{ backgroundColor: '#1A1A1A' }} onClick={() => alert(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É ${card.original}`)}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</Button>
                <Button color="error" sx={{ backgroundColor: '#1A1A1A' }} onClick={() => alert(`–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É ${card.original}`)}>–£–¥–∞–ª–∏—Ç—å</Button>
              </AccordionActions>
            </Accordion>
          </ListItem>
        ))}
      </List>
    </Container>
  );
};

export default SetPage;
